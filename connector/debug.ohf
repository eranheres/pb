##2015-09-17 13:56:55##

##notes##
dll$f_notes 

##dll##
user.dll

##f$alli##
dll$f_alli 
 

##f$betpot_2_1##
dll$f_betpot_2_1 
 

##f$betpot_1_1##
dll$f_betpot_1_1 
 

##f$betpot_3_4##
dll$betpot_3_4 
 

##f$betpot_2_3##
dll$betpot_2_3 
 

##f$betpot_1_2##
dll$betpot_1_2 
 

##f$betpot_1_3##
dll$xbetpot_1_3 
 

##f$betpot_1_4##
dll$betpot_1_4 
 

##f$betsize##
dll$betsize 
// Betsize in dollars, raise-to semantics.
// OpenHoldem will auto-adapt the betsize to the casinos input-requirements.
// Please define your tablemaps "betsizeinterpretationmethod"
// to configure this feature.


##f$rais##
dll$rais
 

##f$call##
dll$call 
 

##f$check##
dll$check 
// Check whenever it is free to call
//(call == 0) 

##f$fold##
dll$fold
// f$fold should always evaluate to true per default
// for auto-check-folding instead of time-outs.
//1 

##f$sitin##
dll$sitin 
 

##f$sitout##
dll$sitout 
 

##f$leave##
dll$leave 
 

##f$rematch##
dll$rematch 
 

##f$autopost##
dll$autopost 
 

##f$close##
dll$close
 

##f$rebuy##
dll$rebuy
// f$rebuy should evaluate to the target-amount in dollars.
// This value will be passed to the rebuy-script as a parameter.
//0


##f$prefold##
dll$prefold
 

##f$chat##
dll$chat
 

##f$delay##
dll$delay
// Autoplayer-delay in milli-seconds


##f$allin_on_betsize_balance_ratio##
dll$allin_on_betsize_balance_ratio
// Allin if betsize is more than X% of our total balance (including currentbet).
// This affects f$betsize and all f$betpot_X_Y_ functions.
//  0.00 =  0% = disabled
//  0.50 = 50%
//0.00


##f$ini_function_on_startup##
dll$ini_function_on_startup
// Ini-functions are meant for
//   * Initialization of memory-symbols at well-defined times
//   * Triggering calculations, e.g. in a DLL


##f$ini_function_on_connection##
dll$ini_function_on_connection
 

##f$ini_function_on_handreset##
dll$ini_function_on_handreset
 

##f$ini_function_on_new_round##
dll$ini_function_on_new_round
 

##f$ini_function_on_my_turn##
dll$ini_function_on_my_turn
 

##f$ini_function_on_heartbeat##
dll$ini_function_on_heartbeat
//0

##f$prwin_number_of_opponents##
dll$prwin_number_of_opponents
// "Reasonable" default to get standard PrWin running for beginners,
// Works even with "no opponents".
//nopponentsplaying + 1 

##f$prwin_number_of_iterations##
dll$prwin_number_of_iterations
// "Reasonable" default to get PrWin running for beginners.
// Large enough to get usable results,
// small enough to save CPU-time.
//1000 

##f$prwin_topclip##
dll$prwin_topclip
 

##f$prwin_mustplay##
dll$prwin_mustplay
 

##f$prwin_willplay##
dll$prwin_willplay
 

##f$prwin_wontplay##
dll$prwin_wontplay
 

##f$icm_prize1##
dll$icm_prize1
// f$icm_prizeX functions are used to configure the payout-structure in tournaments.
// The sum of all f$icm_prizeX functions should be 1.00 (= 100%).
// Default to get things going: the winner takes it all.
//1.00


##f$icm_prize2##
dll$icm_prize1
 

##f$icm_prize3##
dll$icm_prize1
 

##f$icm_prize4##
dll$icm_prize1
 

##f$icm_prize5##
dll$icm_prize1
 

##f$icm_prize6##
dll$icm_prize1
 

##f$icm_prize7##
dll$icm_prize1
 

##f$icm_prize8##
dll$icm_prize1
 

##f$icm_prize9##
dll$icm_prize1
 

##f$test##
dll$test
 

##f$debug##
dll$debug

//////////////////////////////////////
// Debug loopback options

// 1 if debug option is enabled
##f$loopback_debug##
0

##f$preflop_raise_loopback##
0
 
##f$preflop_raise_to_loopback##
0

##f$preflop_call_loopback##
0

##f$preflop_fold_loopback##
0

##f$flop_raise_loopback##
0
 
##f$flop_raise_to_loopback##
0

##f$flop_call_loopback##
0

##f$flop_fold_loopback##
0

##f$turn_raise_loopback##
0
 
##f$turn_raise_to_loopback##
0

##f$turn_call_loopback##
0

##f$turn_fold_loopback##
0

##f$river_raise_loopback##
0
 
##f$river_raise_to_loopback##
0

##f$river_call_loopback##
0

##f$river_fold_loopback##
0


////////////////////////////////////
// OpenPPL lifecycle methods
////////////////////////////////////
##f$preflop##
WHEN (dll$preflop_raise = 1) RaiseTo dll$preflop_raise_to FORCE
WHEN (dll$preflop_call = 1) Call FORCE
WHEN (dll$preflop_fold = 1) Fold FORCE
​
##f$flop##
WHEN (dll$flop_raise = 1) RaiseTo dll$flop_raise_to FORCE
WHEN (dll$flop_call = 1) Call FORCE
WHEN (dll$flop_fold = 1) Fold FORCE
​
##f$turn##
WHEN (dll$turn_raise = 1) RaiseTo dll$turn_raise_to FORCE
WHEN (dll$turn_call = 1) Call FORCE
WHEN (dll$turn_fold = 1) Fold FORCE
​
##f$river##
WHEN (dll$river_raise = 1) RaiseTo dll$river_raise_to FORCE
WHEN (dll$river_call = 1) Call FORCE
WHEN (dll$river_fold = 1) Fold FORCE

